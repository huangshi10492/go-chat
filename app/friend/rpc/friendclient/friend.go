// Code generated by goctl. DO NOT EDIT.
// Source: friend.proto

package friendclient

import (
	"context"

	"go-chat/app/friend/rpc/friend"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AgreeFriendReq           = friend.AgreeFriendReq
	CheckIsFriendRequest     = friend.CheckIsFriendRequest
	CheckIsFriendResponse    = friend.CheckIsFriendResponse
	DeleteFriendReq          = friend.DeleteFriendReq
	Empty                    = friend.Empty
	FriendInfo               = friend.FriendInfo
	FriendRequestInfo        = friend.FriendRequestInfo
	GetFriendListReq         = friend.GetFriendListReq
	GetFriendListResp        = friend.GetFriendListResp
	GetFriendRequestListReq  = friend.GetFriendRequestListReq
	GetFriendRequestListResp = friend.GetFriendRequestListResp
	ModifyFriendRemarkReq    = friend.ModifyFriendRemarkReq
	SendFriendReq            = friend.SendFriendReq

	Friend interface {
		SendFriend(ctx context.Context, in *SendFriendReq, opts ...grpc.CallOption) (*Empty, error)
		AgreeFriend(ctx context.Context, in *AgreeFriendReq, opts ...grpc.CallOption) (*Empty, error)
		ModifyFriendRemark(ctx context.Context, in *ModifyFriendRemarkReq, opts ...grpc.CallOption) (*Empty, error)
		DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*Empty, error)
		GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
		GetFriendRequestList(ctx context.Context, in *GetFriendRequestListReq, opts ...grpc.CallOption) (*GetFriendRequestListResp, error)
		CheckIsFriend(ctx context.Context, in *CheckIsFriendRequest, opts ...grpc.CallOption) (*CheckIsFriendResponse, error)
	}

	defaultFriend struct {
		cli zrpc.Client
	}
)

func NewFriend(cli zrpc.Client) Friend {
	return &defaultFriend{
		cli: cli,
	}
}

func (m *defaultFriend) SendFriend(ctx context.Context, in *SendFriendReq, opts ...grpc.CallOption) (*Empty, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.SendFriend(ctx, in, opts...)
}

func (m *defaultFriend) AgreeFriend(ctx context.Context, in *AgreeFriendReq, opts ...grpc.CallOption) (*Empty, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.AgreeFriend(ctx, in, opts...)
}

func (m *defaultFriend) ModifyFriendRemark(ctx context.Context, in *ModifyFriendRemarkReq, opts ...grpc.CallOption) (*Empty, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.ModifyFriendRemark(ctx, in, opts...)
}

func (m *defaultFriend) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*Empty, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

func (m *defaultFriend) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

func (m *defaultFriend) GetFriendRequestList(ctx context.Context, in *GetFriendRequestListReq, opts ...grpc.CallOption) (*GetFriendRequestListResp, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.GetFriendRequestList(ctx, in, opts...)
}

func (m *defaultFriend) CheckIsFriend(ctx context.Context, in *CheckIsFriendRequest, opts ...grpc.CallOption) (*CheckIsFriendResponse, error) {
	client := friend.NewFriendClient(m.cli.Conn())
	return client.CheckIsFriend(ctx, in, opts...)
}
