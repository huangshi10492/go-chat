// Code generated by goctl. DO NOT EDIT.
// Source: friend.proto

package server

import (
	"context"

	"go-chat/app/friend/rpc/friend"
	"go-chat/app/friend/rpc/internal/logic"
	"go-chat/app/friend/rpc/internal/svc"
)

type FriendServer struct {
	svcCtx *svc.ServiceContext
	friend.UnimplementedFriendServer
}

func NewFriendServer(svcCtx *svc.ServiceContext) *FriendServer {
	return &FriendServer{
		svcCtx: svcCtx,
	}
}

func (s *FriendServer) SendFriend(ctx context.Context, in *friend.SendFriendReq) (*friend.Empty, error) {
	l := logic.NewSendFriendLogic(ctx, s.svcCtx)
	return l.SendFriend(in)
}

func (s *FriendServer) AgreeFriend(ctx context.Context, in *friend.AgreeFriendReq) (*friend.Empty, error) {
	l := logic.NewAgreeFriendLogic(ctx, s.svcCtx)
	return l.AgreeFriend(in)
}

func (s *FriendServer) ModifyFriendRemark(ctx context.Context, in *friend.ModifyFriendRemarkReq) (*friend.Empty, error) {
	l := logic.NewModifyFriendRemarkLogic(ctx, s.svcCtx)
	return l.ModifyFriendRemark(in)
}

func (s *FriendServer) DeleteFriend(ctx context.Context, in *friend.DeleteFriendReq) (*friend.Empty, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

func (s *FriendServer) GetFriendList(ctx context.Context, in *friend.GetFriendListReq) (*friend.GetFriendListResp, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

func (s *FriendServer) GetFriendRequestList(ctx context.Context, in *friend.GetFriendRequestListReq) (*friend.GetFriendRequestListResp, error) {
	l := logic.NewGetFriendRequestListLogic(ctx, s.svcCtx)
	return l.GetFriendRequestList(in)
}

func (s *FriendServer) CheckIsFriend(ctx context.Context, in *friend.CheckIsFriendRequest) (*friend.CheckIsFriendResponse, error) {
	l := logic.NewCheckIsFriendLogic(ctx, s.svcCtx)
	return l.CheckIsFriend(in)
}
