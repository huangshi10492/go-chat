// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	friendRequestFieldNames          = builder.RawFieldNames(&FriendRequest{})
	friendRequestRows                = strings.Join(friendRequestFieldNames, ",")
	friendRequestRowsExpectAutoSet   = strings.Join(stringx.Remove(friendRequestFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	friendRequestRowsWithPlaceHolder = strings.Join(stringx.Remove(friendRequestFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheFriendRequestIdPrefix = "cache:friendRequest:id:"
)

type (
	friendRequestModel interface {
		Insert(ctx context.Context, data *FriendRequest) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FriendRequest, error)
		Update(ctx context.Context, data *FriendRequest) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFriendRequestModel struct {
		sqlc.CachedConn
		table string
	}

	FriendRequest struct {
		Id       int64  `db:"id"`
		UserId   int64  `db:"user_id"`
		FriendId int64  `db:"friend_id"`
		Reason   string `db:"reason"` // 申请原因
		Remark   string `db:"remark"` // 好友请求备注
		Status   int64  `db:"status"` // 0: 未处理, 1: 同意, 2: 拒绝
	}
)

func newFriendRequestModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFriendRequestModel {
	return &defaultFriendRequestModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`friend_request`",
	}
}

func (m *defaultFriendRequestModel) withSession(session sqlx.Session) *defaultFriendRequestModel {
	return &defaultFriendRequestModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`friend_request`",
	}
}

func (m *defaultFriendRequestModel) Delete(ctx context.Context, id int64) error {
	friendRequestIdKey := fmt.Sprintf("%s%v", cacheFriendRequestIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, friendRequestIdKey)
	return err
}

func (m *defaultFriendRequestModel) FindOne(ctx context.Context, id int64) (*FriendRequest, error) {
	friendRequestIdKey := fmt.Sprintf("%s%v", cacheFriendRequestIdPrefix, id)
	var resp FriendRequest
	err := m.QueryRowCtx(ctx, &resp, friendRequestIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendRequestRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFriendRequestModel) Insert(ctx context.Context, data *FriendRequest) (sql.Result, error) {
	friendRequestIdKey := fmt.Sprintf("%s%v", cacheFriendRequestIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, friendRequestRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FriendId, data.Reason, data.Remark, data.Status)
	}, friendRequestIdKey)
	return ret, err
}

func (m *defaultFriendRequestModel) Update(ctx context.Context, data *FriendRequest) error {
	friendRequestIdKey := fmt.Sprintf("%s%v", cacheFriendRequestIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, friendRequestRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.FriendId, data.Reason, data.Remark, data.Status, data.Id)
	}, friendRequestIdKey)
	return err
}

func (m *defaultFriendRequestModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheFriendRequestIdPrefix, primary)
}

func (m *defaultFriendRequestModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", friendRequestRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFriendRequestModel) tableName() string {
	return m.table
}
