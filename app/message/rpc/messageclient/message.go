// Code generated by goctl. DO NOT EDIT.
// Source: message.proto

package messageclient

import (
	"context"

	"go-chat/app/message/rpc/message"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                  = message.Empty
	MessageHandlerRequest  = message.MessageHandlerRequest
	ReadHandlerRequest     = message.ReadHandlerRequest
	WithdrawHandlerRequest = message.WithdrawHandlerRequest

	Message interface {
		MessageHandler(ctx context.Context, in *MessageHandlerRequest, opts ...grpc.CallOption) (*Empty, error)
		ReadHandler(ctx context.Context, in *ReadHandlerRequest, opts ...grpc.CallOption) (*Empty, error)
		WithdrawHandler(ctx context.Context, in *WithdrawHandlerRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultMessage struct {
		cli zrpc.Client
	}
)

func NewMessage(cli zrpc.Client) Message {
	return &defaultMessage{
		cli: cli,
	}
}

func (m *defaultMessage) MessageHandler(ctx context.Context, in *MessageHandlerRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.MessageHandler(ctx, in, opts...)
}

func (m *defaultMessage) ReadHandler(ctx context.Context, in *ReadHandlerRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.ReadHandler(ctx, in, opts...)
}

func (m *defaultMessage) WithdrawHandler(ctx context.Context, in *WithdrawHandlerRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := message.NewMessageClient(m.cli.Conn())
	return client.WithdrawHandler(ctx, in, opts...)
}
